// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL2")
}

enum Role {
    USER
    CONTRIBUTOR
    ADMIN
    SUPER_ADMIN
}

enum Color {
    red
    greeen
    blue
    orange
}

model User {
    id                           Int       @id @default(autoincrement())
    username                     String    @db.VarChar(128)
    email                        String    @unique
    password                     String    @db.Char(128)
    role                         Role      @default(USER)
    avatarColor                  Color     @default(orange)
    nottifyMeIfUsedInDocumentary Boolean   @default(true)
    listMeInDirectory            Boolean   @default(true)
    listMyTestemonials           Boolean   @default(true)
    imStatus                     Boolean   @default(true)
    uniqueUrlForLogin            String?   @db.VarChar(60)
    lastTimeLogged               DateTime  @updatedAt
    isUploaded                   Json?     @db.Json
    approvedByAdmin              Boolean   @default(false)
    setPassword                  Boolean   @default(false)
    activatedByEmail             Boolean   @default(false)
    accountActivationToken       String?   @db.VarChar(60)
    accountActivationExpires     BigInt?   @db.BigInt
    passwordResetToken           String?   @db.VarChar(60)
    passwordResetExpires         BigInt?   @db.BigInt
    createdAt                    DateTime  @default(now())
    updatedAt                    DateTime  @updatedAt
    deleted                      Boolean   @default(false)
    deletedAt                    DateTime?
    Profile                      Profile?
}

model Profile {
    id                           Int                   @id @default(autoincrement())
    bio                          String?
    user                         User                  @relation(fields: [userId], references: [id])
    userId                       Int                   @unique
    author                       Author                @relation(fields: [authorId], references: [id])
    authorId                     Int                   @unique
    firstName                    String?               @db.VarChar(60)
    middleName                   String?               @db.VarChar(60)
    lastName                     String?               @db.VarChar(60)
    profilePicture               String                @db.VarChar(255)
    postsCount                   Int                   @default(0)
    followersCount               Int                   @default(0)
    followingCount               Int                   @default(0)
    blocked                      Json                  @db.Json
    blockedBy                    Json                  @db.Json
    profileNotificationsSettings ProfileNotifications?
    social                       Social?
    work                         String?               @default("")
    school                       String?               @default("")
    location                     String?               @default("")
    quote                        String?               @default("")
    bgImageVersion               String?               @db.VarChar(60)
    bgImageId                    String?               @db.VarChar(30)
    createdAt                    DateTime              @default(now())
    updatedAt                    DateTime              @updatedAt
    deletedAt                    DateTime?
    deleted                      Boolean               @default(false)
}

model Social {
    id             Int       @id @default(autoincrement())
    profile        Profile   @relation(fields: [profileId], references: [id])
    profileId      Int       @unique
    facebook       String?   @default("")
    instagram      String?   @default("")
    youttwitterube String?   @default("")
    youtube        String?   @default("")
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?
    deleted        Boolean   @default(false)
}

model ProfileNotifications {
    id        Int       @id @default(autoincrement())
    profile   Profile   @relation(fields: [profileId], references: [id])
    profileId Int       @unique
    messages  Boolean   @default(true)
    reactions Boolean   @default(true)
    comments  Boolean   @default(true)
    follows   Boolean   @default(true)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    deleted   Boolean   @default(false)
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    deleted   Boolean   @default(false)
    posts     Post[]
    autors    Author[]
}

model Author {
    id         Int        @id @default(autoincrement())
    name       String
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    deletedAt  DateTime?
    deleted    Boolean    @default(false)
    posts      Post[]
    Profile    Profile?
    categories Category[]
}

model Post {
    id         Int       @id @default(autoincrement())
    title      String    @db.VarChar(255)
    content    String?
    published  Boolean   @default(false)
    category   Category  @relation(fields: [categoryId], references: [id])
    categoryId Int
    author     Author    @relation(fields: [authorId], references: [id])
    authorId   Int
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
    deleted    Boolean   @default(false)
}
